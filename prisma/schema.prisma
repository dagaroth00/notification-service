// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String             @id @default(uuid())
  email        String?            @unique
  phone        String?
  name         String?
  createdAt    DateTime           @default(now())

  // Relations
  notifications Notifications[]
  preferences   UserPreference[]
  deviceTokens  DeviceToken[]
}

model NotificationTemplate {
  id         Int                @id @default(autoincrement())
  name       String             @unique
  title      String
  body       String
  channel    String
  metadata   Json?
  createdAt  DateTime           @default(now())

  notifications Notifications[]
}

model Notifications {
  id            String              @id @default(uuid())
  userId        String
  templateId    Int?
  title         String
  body          String
  channel       String
  status        String              @default("pending")
  priority      String              @default("normal")
  metadata      Json?
  createdAt     DateTime            @default(now())
  sentAt        DateTime?
  readAt        DateTime?

  // Relations
  user          User                @relation(fields: [userId], references: [id])
  template      NotificationTemplate? @relation(fields: [templateId], references: [id])
  eventLogs     EventLog[]
}

model UserPreference {
  id         Int        @id @default(autoincrement())
  userId     String
  channel    String
  enabled    Boolean     @default(true)
  createdAt  DateTime    @default(now())

  user       User        @relation(fields: [userId], references: [id])
}

model DeviceToken {
  id         Int        @id @default(autoincrement())
  userId     String
  token      String      @unique
  platform   String
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())

  user       User        @relation(fields: [userId], references: [id])
}

model EventLog {
  id              Int             @id @default(autoincrement())
  notificationId  String
  eventType       String
  message         String?
  createdAt       DateTime        @default(now())

  notification    Notifications   @relation(fields: [notificationId], references: [id])
}

model ChannelConfig {
  id         Int        @id @default(autoincrement())
  channel    String     @unique
  config     Json
  createdAt  DateTime   @default(now())
}
